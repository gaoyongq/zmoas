<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans

       		http://www.springframework.org/schema/beans/spring-beans.xsd 
       		http://www.springframework.org/schema/context 
       		http://www.springframework.org/schema/context/spring-context.xsd
       		http://www.springframework.org/schema/aop 
       		http://www.springframework.org/schema/aop/spring-aop.xsd
       		http://www.springframework.org/schema/mvc
       		http://www.springframework.org/schema/mvc/spring-mvc.xsd

     		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"
       default-lazy-init="true" default-autowire="byName">
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
        <!--<property name="messageConverters">-->
            <!--<list>-->
                <!--<bean class="org.springframework.http.converter.StringHttpMessageConverter">-->
                    <!--<property name="supportedMediaTypes">-->
                        <!--<list>-->
                            <!--<bean class="org.springframework.http.MediaType">-->
                                <!--<constructor-arg index="0" value="text"/>-->
                                <!--<constructor-arg index="1" value="json"/>-->
                                <!--<constructor-arg index="2" value="UTF-8"/>-->
                            <!--</bean>-->
                        <!--</list>-->
                    <!--</property>-->
                <!--</bean>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
    </bean>
    <!-- 解决ajax中文乱码 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
	<mvc:annotation-driven/>
	<bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath:${env}/config.properties</value>
                <value>classpath:${env}/important.properties</value>
                <!--引入redis配置文件-->
                <value>classpath:${env}/redis.properties</value>
            </list>
        </property>
    </bean>

    <import resource="classpath:spring/servlet-context.xml"/>
    <import resource="classpath:spring/spring-config-dao.xml"/>
    <import resource="classpath:spring/spring-config-servlet.xml"/>
    <import resource="classpath:spring/spring-config-service.xml"/>


    <bean id="userListService" class="com.zm.mall.service.business.impl.UserListServiceImpl">
        <property name="userListDao" ref="userListDaoImpl"></property>
    </bean>
    <jaxws:endpoint id="greetingService"  implementor="#userListService"   address="/accountsUsers">
            <jaxws:inInterceptors>
                <bean class="com.zm.mall.service.business.CheckUserInterceptor"></bean>
            </jaxws:inInterceptors>
    </jaxws:endpoint>

    <bean id="orderInfoService" class="com.zm.mall.service.business.impl.orders.OrderInfoServiceImpl">
        <property name="orderInfoDao" ref="orderInfoDaoImpl"></property>
    </bean>
    <jaxws:endpoint id="orderInfo" implementor="#orderInfoService" address="/accountsOrderInfo"/>

    <bean id="productInfoService" class="com.zm.mall.service.business.product.impl.ProductInfoServiceImpl">
        <property name="productInfoDao" ref="productInfoDaoImpl"></property>
    </bean>
    <jaxws:endpoint id="productInfo" implementor="#productInfoService" address="/productInfoService"/>
    <!--<context:property-placeholder location="classpath:config_online/redis.properties" />-->
    <!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 -->
    <!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />-->

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxActive" value="${redis.maxActive}" />
        <property name="maxWait" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"  p:poolConfig-ref="poolConfig"/>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory"   ref="connectionFactory" />
        <!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <!-- <property name="keySerializer">
             <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
         </property>
         <property name="valueSerializer">
             <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
         </property>-->
    </bean>
</beans>